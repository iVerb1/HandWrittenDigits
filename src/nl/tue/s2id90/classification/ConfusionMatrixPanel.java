/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package nl.tue.s2id90.classification;

import java.awt.Container;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import javax.swing.JFrame;
import javax.swing.table.AbstractTableModel;
import nl.tue.s2id90.classification.data.LabeledDataset2;
import nl.tue.s2id90.classification.data.Features;

/**
 * class to show a confusion matrix in a swing widget and display it in 
 * a popup frame.
 * @author huub
 * @param <F> vector of features
 * @param <L> classification label
 */
public class ConfusionMatrixPanel<F extends Features,L> extends javax.swing.JPanel {

    /**
     * Creates new form ConfusionMatrixPanel
     * @param dataset
     * @param matrix
     */
    public ConfusionMatrixPanel(LabeledDataset2<F,L> dataset, Map<L,Map<L,Integer>> matrix) {
        initComponents();
        fillTable(dataset,matrix);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.setEnabled(false);
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    private void fillTable(final LabeledDataset2<F, L> dataset, final Map<L,Map<L,Integer>> matrix) {
        
        // collect all known classes and order them (in natural ordering)
       TreeSet<L> classSet = new TreeSet<>();
       for(L t: matrix.keySet()) {
           classSet.add(t);
           for(L s : matrix.get(t).keySet()) {
               classSet.add(s);
           }
       }
       
       final List<L> classList = new ArrayList<>(classSet);
       
       table.setModel(new AbstractTableModel() {
           @Override
           public int getRowCount() { return 1+classList.size(); }

           @Override
           public int getColumnCount() { return 2+classList.size(); }

           @Override
           public Object getValueAt(int i, int j) {
               if (i==0 && j==0) { // (empty) upper left cell
                   return "";     
               }  else if (j==getRowCount() && i==0) {
                   return "total";
               } else if (j==getRowCount()) {
                   return "<html><b>"+dataset.getFeatures(classList.get(i-1)).size();
               } else if (i==0) {// column label in bold
                   return "<html><b>"+classList.get(j-1);
               } else if (j==0) { // row label in bold
                   return "<html><b>"+classList.get(i-1);
               } 
              
               L r = classList.get(i-1);
               L c = classList.get(j-1);
               Map<L,Integer> row = matrix.get(r);
               if (row==null) {
                   return 0;
               } else {
                    Integer count = row.get(c);
                    if (count==null) {
                        return 0;
                    } else {
                        List<F> all = dataset.getFeatures(r);
                        final int N = all==null?0:all.size();
                        if (N==0) {
                            return 0;
                        } else
                            return count; //Math.round(100*(count/(float)N));
                    }
               }
           }
       });
    }
    
    public void showIt() {      
        JFrame frame = new JFrame("confusion matrix");
        Container pane = frame.getContentPane();
        pane.add(this);
        frame.pack();
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
}